참조타입(Reference Type)

1. 원시타입(기본타입)
   - byte, char, short, int, long, float, double, boolean
   - call by value(값을 전달)
   - 변수의 값이 스택(stack)에 저장
   
2. 참조타입
   - call by reference(주소참조)
   - 주소는 스택에 저장되면 주소 전달
   - 변수의 값이 힙(heap)에 저장
   - 예) 인터넷의 URL(주소) 전달과 비슷한 개념   
   - 배열, 열거형, 클래스(사용자 정의 타입)
   - 인터페이스
   - 문자열(String)   
   - 참조 타입을 이용해서 선언된 변수는 메모리의 번지를 값으로 갖는다.
   - 번지를 통해서 객체를 참조한다는 뜻에서 참조타입이라 부른다.
   
3. 기본타입과 참조타입 비교(int vs String)
   - 기본타입과 참조타입(String)의 변수 선언 방법을 동일하지만
     내부적으로 관리되는 방법의 차이
   - 참조타입에서 String외에 일반적인 클래스(class)는 선언방법이
     문자열(String)과는 다르다.
           
   - 예) 
     int x = 10;  // 기본타입
     String hello = "안녕!"; // 참조타입

4. 변수의 선언
   - 일반적으로 변수는 선언되면 스택(stack) 영역에 할당된다.
   - 메모리 영역은 스택(stack)과 힙(heap)이 있다.
   - 기본타입은 스택영역에 변수이름과 값이 같이 할당된다.
   - 참조타입은 스택영역에는 변수이름과 참조되는 주소가 할당되고
     해당하는 값은 힙영역에 할당이 된다.
   - 참조타입은 여러 변수에서 주소를 공유할 수 있다.
     다른 변수에서 값을 변경할 수 있다.     
     
5. 메모리 사용 영역
   - 메소드(Method) 영역
   - 힙(Heap) 영역
   - 스택(Stack) 영역
   
6. 메소드 영역
   - 메소드는 클래스의 멤버 함수
   - 클래스(속성, 멤버함수)가 로드되어 위치하는 공간
      
7. 힙 영역
   - 객체가 위치하는 공간
   - 객체는 클래스가 실체화된 것      
   - 사용되지 않는 객체는 쓰레기 수집기(Garbage Collector)에 의해서 제거(재사용)
   
8. 스택 영역
   - 변수의 선언에 의해서 변수가 할당
   - 기본타입은 변수이름과 값이 할당
   - 참조타입은 변수이름과 주소가 할당
   - 스레드별로 하나의 스택 공간이 할당
   - 기본적으로 main 스레드는 반드시 하나가 할당
      
   
9. 무효의 값(null)
   - 무효의 값(literal)
   - 참조타입은 널(null) 값을 가질 수 있다.
   - 참조타입이 널값을 가지면 스택에 할당은 되지만 힙영역에는 할당되지 않은 상태
   - 참조변수를 더이상 사용하지 않을 때 null로 세팅하게 되면 
     GC(Garbage Collector)에 의해서
     메모리 해제를 하여 다른 변수로 사용하도록 한다.
       
10. 배열       
   - 동일한 자료들의 연속된 모음
   - 일반적인 변수는 하나의 변수에 하나의 값만 할당된 것과 달리 
     배열은 여러개의 값을 넣을 수 있다.
   - 동일한 타입의 값이 연속되어 할당되어 있는 것
   - 1차원부터 n까지 선언이 가능
   - 1차원 : 임의의 타입이 0부터 n까지 할당
   - 2차원 : 행과 열로 할당(행,열)
   - 3차원 : 1차원 여러개 할당(면, 행, 열)
   - 빠르게 자료를 처리하는데 유용
   - 배열의 선언은 대괄호 []
   - 초기값 지정은 중괄호 {}
   - 초가값을 지정한 것으로 배열의 크기가 결정
   - 배열의 선언:
     타입[] 변수 = { 초기값1, 초기값2, ... };
     타입[] 변수 = new 타입[길이] { 초기값1, 초기값2, ... };
     타입[] 변수 = new 타입[길이];
   
11. 객체
   - 클래스가 생성되어 만들어 진 것
   - new를 통해서 객체가 생성
   - 문자열(String)은 new를 하지 않고 값을 할당해도 문자열 객체가 생성된다.
   - 클래스: 객체의 틀(원형), DNA
   - 예: 사람(클래스)
     > 사람 -> 홍길동(객체), 이순신(객체)
     > 객체는 객체의 원형의 성질을 가지고 있는만 서로 독립적인 개체
     > 사람이고 하는 특징을 가지고 있다.
     > 사람의 특징:
       -> 속성(필드) : 얼굴, 손, 다리, 키, 몸무게
       -> 행위(메소드) : 걷는다, 달린다, 말한다, 노래한다, 본다
   - 예: 문자열(String)
     > 속성: 변수, 문자들, 크기
     > 행위: 함수, 같은가(equals), 길이(length)  
     > String hello
       -> 길이? : hello.length()
       -> 같은가? : hello.equals("문자열")
       -> 비어있는가? : hello.isEmpty();
   - 객체생성(실체)
     > 객체가 가지고 있는 속성이나 메소드를 사용하기 위해서는 접근연산자 점(.)을 사용해서 기술한다.
       클래스이름 객체이름 = new 클래스이름();
       객체이름.속성;
       객체이름.메소드();
     > String hello = new String("hello");
       hello.length();
       hello.equals("hello");      
       
       
      
   
    
   
      