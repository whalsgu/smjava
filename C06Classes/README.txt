[클래스] 

OOP(Object Oriented Programming) 객체지향 프로그래밍

Object(객체)
사람, 동물, 자동차, 물건, 컴퓨터

Object Modeling(객체 모델링)
- 현실 세계에 있는 독립적인 객체를 소프트웨어를 통해서 표현하고자 하는 것을 추상화

객체지향의 특징
- 캡슐화: 독립, 분리, 보호
- 상속: 기능의 소유
- 다형성: 특화된 기능으로 확장

객체 관계(Object Relationship)
- 집합관계: 서로 포함하고 포함되는 관계(부부)
- 사용관계: 객체간의 상호 작용(사업)
- 상속관계: 가족(부모, 자식)

클래스(class)
- 사용자 자료형
- 객체를 생성하기 템플릿(틀) 역할
- 객체를 생성하기 위한 설계도
- 객체는 클래스가 인스턴스화(instantiate) 즉 실체화 된 것
- 클래스로부터 만들어진 객체를 해당 클래스의 인스턴스(instance)라고 한다.


클래스의 정의(Definition)
- 클래스의 구조를 만드는 것
- 자료형을 만드는 것(Integer, String, Boolean, ...)
- 사용자 자료형을 만들는 것

클래스의 선언(Declare)
- 만들어진 클래스를 사용하는 것
- 자료형을 사용하기 위해서 변수로 지정
  예: Integer x;

클래스 작성 규칙
- 변수이름 작성규칙과 동일
- 클래스이름은 파일이름과 동일

클래스 생성자
- 클래스가 생성(new)될 때 가장 먼저 호출되는 메소드(멤버함수)
- 클래스의 생성자는 클래스의 이름과 동일해야 한다.

- 생성자를 정의하지 않으면 컴파일러는 기본생성자를 자동으로 만들어 준다.
- 생성자를 여러개 만들 수 있지만 파라미터가 달라야 한다.
- 생성자는 리턴 타입이 없다. 그러므로 결과를 리턴하지 않는다.
- this는 클래스가 객체와 되었을 때 가지고 있는 식별자이다.
- 클래스가 사람이면 객체는 홍길동, 이순신처럼 실체이다.
  그러므로 객체는 식별할 수 있는 this를 가진다.
   
함수: 자바는 함수가 없고 클래스에 종속되어 있는 함수인 메소드가 있다.
- 블랙박스: 내부에서 처리되는 내용을 밖에서 볼 수가 없다.
- 파라미터: 함수를 호출할 때 전달되는 내용
- 처리결과: 리턴값(return value)

메소드(함수)의 구조:
	- void : 리턴값이 없는 경우로서 리턴값을 명시하지 않음
	- 리턴타입 : return의 리턴값과 자료형이 같아야 한다.
	- 리턴타입이 void외에 다른 타입으로 지정되면 
	  반드시 return 리턴값; 형태로 명시되어야 한다.
	  

	리턴타입 함수이름(파라미터, ...) {
	    실행문
		return 리턴값;
	}

    void printInfo() {
         ...
    }
    
    void printInfo(String title) {
         ...
    }
    
    int max(int a, int b) {
    	if(a > b) {
    		return a;
    	}
    	else {
    		return b;
    	}
    } 



